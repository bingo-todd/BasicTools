import numpy as np
import argparse
import matplotlib.pyplot as plt


from . import wav_tools
from . import plot_tools
from . import fft
# from .scale import erb


def plot_spec(wav, frame_len=1024, frame_shift=None, fs=None,
              spec_type='spectrogram', label=None, ax=None, fig=None):
    """
    Args:
        wav: waveform
        frame_len: frame length of fft, default to be 1024
        frame_shift: default to half of frame_len
        label:
    """
    # ensure wav is two-dimension array, [wav_len, n_chann]
    if len(wav.shape) == 1:
        wav = wav[:, np.newaxis]
    wav_len, n_chann = wav.shape

    # stft
    stft = fft.cal_stft(wav, frame_len=frame_len, frame_shift=frame_shift)
    stft_amp = 20*np.log10(stft**2+1e-20)
    n_frame, n_freq_bin, _ = stft.shape

    # visualization
    if ax is None:
        fig, ax = plot_tools.subplots(1, n_chann, sharex=True, sharey=True)
        if n_chann == 1:
            ax = [ax]
    if fs is not None:
        t = np.arange(n_frame)*frame_shift/fs
        freq_bins = np.arange(n_freq_bin)/frame_len*fs
    else:
        t = np.arange(n_frame)*frame_shift
        freq_bins = np.arange(n_freq_bin)/frame_len
    for chann_i in range(n_chann):
        if spec_type == 'spectrogram':
            plot_tools.plot_matrix(
                stft_amp[:, :, chann_i].T, x=t, y=freq_bins, ax=ax[chann_i])
        elif spec_type == 'spectrum':
            ax[chann_i].plot(
                freq_bins, np.mean(stft_amp[:, :, chann_i], axis=0))
    if spec_type == 'spectrogram':
        if fs is not None:
            ax[0].set_ylabel('freq(Hz)')
            for chann_i in range(n_chann):
                ax[chann_i].set_xlabel('time(s)')
        else:
            ax[0].set_ylabel('normalized freq')
            for chann_i in range(n_chann):
                ax[chann_i].set_xlabel('sample')
    elif spec_type == 'spectrum':
        if fs is not None:
            for chann_i in range(n_chann):
                ax[chann_i].set_xlabel('freq(Hz)')
        else:
            for chann_i in range(n_chann):
                ax[chann_i].set_xlabel('normalized freq')

    return fig, ax


def parse_args():
    parser = argparse.ArgumentParser(description='parse argments')
    parser.add_argument('--wav-path', dest='wav_path', required=True, type=str,
                        nargs='+', help='')
    parser.add_argument('--label', dest='label', default=None, type=str,
                        nargs='+', help='')
    parser.add_argument('--frame-len', dest='frame_len', type=int, default=20,
                        help='frame length in ms')
    parser.add_argument('--frame-shift', dest='frame_shift', type=int,
                        default=10, help='frame shift in ms')
    parser.add_argument('--linewidth', dest='linewidth', type=int,
                        default=2, help='')
    parser.add_argument('--fig-path', dest='fig_path', type=str, default=None,
                        help='')
    parser.add_argument('--interactive', dest='interactive', type=str,
                        default='false', choices=['true', 'false'], help='')
    args = parser.parse_args()
    return args


def main():
    args = parse_args()
    n_wav = len(args.wav_path)
    if args.label is None:
        label = [None for i in range(n_wav)]
    else:
        label = args.label

    wav, fs = wav_tools.read(wav_path)
    fig, ax = plot_spec(wav_path=args.wav_path[0],
                        label=label[0],
                        frame_len=args.frame_len,
                        frame_shift=args.frame_shift,
                        linewidth=args.linewidth)

    if len(args.wav_path) > 1:
        for wav_path_tmp, label_tmp in zip(args.wav_path[1:], label[1:]):
            plot_spec(wav_path=wav_path_tmp,
                      label=label_tmp,
                      frame_len=args.frame_len,
                      frame_shift=args.frame_shift,
                      linewidth=args.linewidth,
                      ax=ax)
    ax[-1].legend()

    if args.fig_path is not None:
        fig.savefig(args.fig_path)
        print(f'fig is saved to {args.fig_path}')

    if args.interactive == 'true':
        plt.show()


if __name__ == '__main__':
    main()
